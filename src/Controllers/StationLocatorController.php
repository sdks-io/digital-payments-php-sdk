<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Controllers;

use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use ShellEVLib\Exceptions\ApiException;
use ShellEVLib\Exceptions\StationLocatorBadRequestException;
use ShellEVLib\Exceptions\StationLocatorForbiddenException;
use ShellEVLib\Exceptions\StationLocatorInternalServerErrorException;
use ShellEVLib\Exceptions\StationLocatorNotFoundException;
use ShellEVLib\Exceptions\StationLocatorUnauthorizedException;
use ShellEVLib\Models\AroundLocationArray;

class StationLocatorController extends BaseController
{
    /**
     * Returns all sites within specified radius of specified GPS location. Sites of all Types are returned.
     * This call must be used when attempting to establish the station the user is located at as part of
     * fuelling journey (i.e. user has to be within 300m of station to be considered located at the
     * station). This API could also be used as a general query to find nearby Shell locations
     *
     * @param string $m API Method to be executed
     * @param float $lon The user’s current longitude
     * @param float $lat The user’s current latitude
     * @param float $radius The search radius in kilometers
     * @param string|null $offerCode This enables requestor to specify locations that will honour
     *        the specified (advanced) offer code
     * @param int|null $n This enables requestor to limit the number of locations that are returned
     *        and defaulted to a maximum of 250 locations. Locations returned based on distance to
     *        User’s location as-the-crow-flies.
     * @param string[]|null $amenities This enables requestor to filter locations based on one or
     *        more amenities (e.g. Filter locations so that only those with a Toilet are returned).
     * @param string[]|null $countries This enables requestor to filter locations based on one or
     *        more Countries (i.e. by country codes).
     *
     * @return AroundLocationArray Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function stationlocatorV1StationsGetAroundLocation(
        string $m,
        float $lon,
        float $lat,
        float $radius,
        ?string $offerCode = null,
        ?int $n = null,
        ?array $amenities = null,
        ?array $countries = null
    ): AroundLocationArray {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/SiteData/v1/stations/')
            ->auth('oAuthTokenPost')
            ->parameters(
                QueryParam::init('m', $m),
                QueryParam::init('lon', $lon),
                QueryParam::init('lat', $lat),
                QueryParam::init('radius', $radius),
                QueryParam::init('offer_code', $offerCode),
                QueryParam::init('n', $n),
                QueryParam::init('amenities', $amenities),
                QueryParam::init('countries', $countries)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad request', StationLocatorBadRequestException::class))
            ->throwErrorOn('401', ErrorType::init('Unauthorized', StationLocatorUnauthorizedException::class))
            ->throwErrorOn('403', ErrorType::init('Forbbiden', StationLocatorForbiddenException::class))
            ->throwErrorOn('404', ErrorType::init('Not Found', StationLocatorNotFoundException::class))
            ->throwErrorOn(
                '500',
                ErrorType::init('Internal Server Error', StationLocatorInternalServerErrorException::class)
            )
            ->type(AroundLocationArray::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}
