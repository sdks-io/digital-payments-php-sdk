<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Controllers;

use Core\Authentication\Auth;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use ShellEVLib\Exceptions\ApiException;
use ShellEVLib\Exceptions\CancelFuelingErrorResponseErrorException;
use ShellEVLib\Exceptions\MppAccesTokenErrorResponseException;
use ShellEVLib\Models\MppAccesTokenResponse;
use ShellEVLib\Models\PrepareFuelingRequest;
use ShellEVLib\Models\PrepareFuelingResponse;

class FuelingController extends BaseController
{
    /**
     * The Digital Payments Service enables 3rd Parties to trigger the refuel process which, if successful,
     * will unlock a pump/nozzle ready for fuelling. Enables a 3rd party to request an access token to
     * start using fueling.
     * APIs
     *
     * @param string $grantType In OAuth 2.0, the term grant type refers to the way an application
     *        gets an access token. OAuth 2.0 defines several grant types, including the
     *        authorization code flow.
     * @param string $clientId After registering your app, you will receive a client ID and a client
     *        secret. The client ID is considered public information, and is used to build login
     *        URLs, or included in Javascript source code on a page.
     * @param string $clientSecret After registering your app, you will receive a client ID and a
     *        client secret. The client ID is considered public information, and is used to build
     *        login URLs, or included in Javascript source code on a page. The client secret must
     *        be kept confidential.
     *
     * @return MppAccesTokenResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function mppToken(string $grantType, string $clientId, string $clientSecret): MppAccesTokenResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/Fueling/v1/oauth/token')
            ->auth('oAuthTokenPost')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/x-www-form-urlencoded'),
                FormParam::init('grant_type', $grantType),
                FormParam::init('client_id', $clientId),
                FormParam::init('client_secret', $clientSecret)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'Unauthorized. The request has not been applied because it lacks valid auth' .
                    'entication credentials for the target resource.',
                    MppAccesTokenErrorResponseException::class
                )
            )
            ->type(MppAccesTokenResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Enables a 3rd party to request to unlock a pump so that they may fill up to a pre-authorised limit.
     * The fuel types that are unlocked may also be determined by permitted fuels stored against the
     * user/entity profile
     *
     * @param string $siteCountry Country ISO code
     * @param string $currency Currency ISO code
     * @param PrepareFuelingRequest $body
     *
     * @return PrepareFuelingResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function mppPrepareFueling(
        string $siteCountry,
        string $currency,
        PrepareFuelingRequest $body
    ): PrepareFuelingResponse {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/Fueling/v1/fueling')
            ->auth(Auth::and('oAuthTokenPost', 'MppToken'))
            ->parameters(
                QueryParam::init('siteCountry', $siteCountry),
                QueryParam::init('currency', $currency),
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'Error Occurred. Request did not include bearer token or token provided and is invalid.'
                )
            )
            ->throwErrorOn('401', ErrorType::init('Unauthorized'))
            ->throwErrorOn('403', ErrorType::init('Forbidden. Requestor is not permitted to call the API'))
            ->throwErrorOn(
                '404',
                ErrorType::init('Not Found. Request received by the server but requested URL not found')
            )
            ->type(PrepareFuelingResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Enables a partner user to cancel pump reservation from the App
     *
     * @param string $mppTransactionId The ID of the transaction thatâ€™s being cancelled
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function mppCancelFueling(string $mppTransactionId): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::DELETE, '/Fueling/v1/fueling/{mppTransactionId}')
            ->auth(Auth::and('oAuthTokenPost', 'MppToken'))
            ->parameters(TemplateParam::init('mppTransactionId', $mppTransactionId));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn(
                '400',
                ErrorType::init(
                    'Error Occurred. The server cannot or will not process the request due to a' .
                    'n apparent client error (e.g., malformed request syntax, invalid request me' .
                    'ssage). Please see below for information regarding structure of Response Bo' .
                    'dy vs. all possible errors that could be returned.',
                    CancelFuelingErrorResponseErrorException::class
                )
            )
            ->throwErrorOn(
                '401',
                ErrorType::init(
                    'Unauthorized. Request did not include bearer token or token provided and is invalid.',
                    CancelFuelingErrorResponseErrorException::class
                )
            )
            ->throwErrorOn('403', ErrorType::init('Forbidden. Requestor is not permitted to call the API.'))
            ->throwErrorOn(
                '404',
                ErrorType::init('Not Found. Request received by the server but requested URL not found')
            );

        $this->execute($_reqBuilder, $_resHandler);
    }
}
