<?php

declare(strict_types=1);

/*
 * ShellSmartPayAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellSmartPayAPILib\Controllers;

use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\FormParam;
use Core\Request\Parameters\HeaderParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use ShellSmartPayAPILib\Exceptions\AccessTokenErrorException;
use ShellSmartPayAPILib\Exceptions\ApiException;
use ShellSmartPayAPILib\Models\AccessTokenResponse;
use ShellSmartPayAPILib\Models\CancelFuelingRequest;
use ShellSmartPayAPILib\Models\FinaliseFuelingRequest;

class PartnerNotificationController extends BaseController
{
    /**
     * To access the Partnerâ€™s endpoints, for sending callback messages, Shell will need to connect to the
     * Partner API end points. It is recemmended that the partner offers OAuth 2.0 as a standard for call
     * back APIs and will require the OAuth 2.0 token for authentication. Note this needs to be implemented
     * over HTTPS
     *
     * @param string $grantType In OAuth 2.0, the term grant typee refers to the way an application
     *        gets an access token. OAuth 2.0 defines several grant types, including the
     *        authorization code flow.
     * @param string $clientId After registering your app, you will receive a client ID and a client
     *        secret. The client ID is considered public information, and is used to build login
     *        URLs, or included in Javascript source code on a page.
     * @param string $clientSecret After registering your app, you will receive a client ID and a
     *        client secret. The client ID is considered public information, and is used to build
     *        login URLs, or included in Javascript source code on a page. The client secret must
     *        be kept confidential.
     *
     * @return AccessTokenResponse Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function partnerToken(string $grantType, string $clientId, string $clientSecret): AccessTokenResponse
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/token')
            ->parameters(
                HeaderParam::init('Content-Type', 'application/x-www-form-urlencoded'),
                FormParam::init('grant_type', $grantType),
                FormParam::init('client_id', $clientId),
                FormParam::init('client_secret', $clientSecret)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', AccessTokenErrorException::class))
            ->type(AccessTokenResponse::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Enables Shell to inform partner of the successful completion of a transaction. Note this needs to be
     * implemented over HTTPS
     *
     * @param FinaliseFuelingRequest|null $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function finaliseFueling(?FinaliseFuelingRequest $body = null): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/finaliseFueling')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request'))
            ->throwErrorOn('401', ErrorType::init('Unauthorized'));

        $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Enables Shell to inform partner that a Mobile Payment transaction has been cancelled by Shell as an
     * error/issue occured. Note this needs to be implemented over HTTPS
     *
     * @param CancelFuelingRequest|null $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cancelFueling(?CancelFuelingRequest $body = null): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/cancelFueling')
            ->parameters(HeaderParam::init('Content-Type', 'application/json'), BodyParam::init($body));

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('400', ErrorType::init('Bad Request'))
            ->throwErrorOn('401', ErrorType::init('Unauthorized'));

        $this->execute($_reqBuilder, $_resHandler);
    }
}
