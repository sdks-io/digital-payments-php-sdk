<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Exceptions;

/**
 * # Digital Payments â€“ Errors
 * This section details the structure of the response Body vs. the different types of errors that
 * could be returned when Digital Payments system responds with a 400 Response Code.
 * | Error Code   | Error Description   | Suggested message to end user   |
 * |-  |-  |-  |
 * | 9342   | Transaction not cancelled, Txn number unknown   | Oops sorry! We are unable to cancel
 * the transaction. Please wait for the site to cancel the transaction before you retry   |
 * | 50004   | Transaction not cancelled, dispensing is already in progress   | Transaction cannot be
 * cancelled, fueling already in progress   |
 * | 50059   | Transaction not cancelable (not in a 'Processing state')   | Transaction cannot be
 * cancelled, fuel has already been dispensed   |
 *
 */
class CancelFuelingErrorResponseErrorException extends ApiException
{
    /**
     * @var string|null
     */
    private $errorCode;

    /**
     * @var string|null
     */
    private $errorDescription;

    /**
     * @var \ShellEVLib\Models\MppError[]|null
     */
    private $errors;

    /**
     * Returns Error Code.
     * The high level error code (e.g. missing data)
     */
    public function getErrorCode(): ?string
    {
        return $this->errorCode;
    }

    /**
     * Sets Error Code.
     * The high level error code (e.g. missing data)
     *
     * @maps errorCode
     */
    public function setErrorCode(?string $errorCode): void
    {
        $this->errorCode = $errorCode;
    }

    /**
     * Returns Error Description.
     * The high level error message (e.g. mandatory fields have not been specified.
     */
    public function getErrorDescription(): ?string
    {
        return $this->errorDescription;
    }

    /**
     * Sets Error Description.
     * The high level error message (e.g. mandatory fields have not been specified.
     *
     * @maps errorDescription
     */
    public function setErrorDescription(?string $errorDescription): void
    {
        $this->errorDescription = $errorDescription;
    }

    /**
     * Returns Errors.
     * Array of error objects. Majority of the time the errorCode and errorDescription will suffice
     *
     * @return \ShellEVLib\Models\MppError[]|null
     */
    public function getErrors(): ?array
    {
        return $this->errors;
    }

    /**
     * Sets Errors.
     * Array of error objects. Majority of the time the errorCode and errorDescription will suffice
     *
     * @maps errors
     *
     * @param \ShellEVLib\Models\MppError[]|null $errors
     */
    public function setErrors(?array $errors): void
    {
        $this->errors = $errors;
    }
}
