<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Models;

use stdClass;

class FinaliseFuelingRequest implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $siteName;

    /**
     * @var int|null
     */
    private $timestamp;

    /**
     * @var float|null
     */
    private $volumeQuantity;

    /**
     * @var string|null
     */
    private $volumeUnit;

    /**
     * @var float|null
     */
    private $finalPrice;

    /**
     * @var string|null
     */
    private $currency;

    /**
     * @var string|null
     */
    private $status;

    /**
     * @var string|null
     */
    private $siteAddress;

    /**
     * @var float|null
     */
    private $originalPrice;

    /**
     * @var float|null
     */
    private $discount;

    /**
     * @var FinaliseFuelingRequestPayment|null
     */
    private $payment;

    /**
     * @var FinaliseFuelingRequestProductsItems[]|null
     */
    private $products;

    /**
     * @var string|null
     */
    private $mppTransactionId;

    /**
     * Returns Site Name.
     */
    public function getSiteName(): ?string
    {
        return $this->siteName;
    }

    /**
     * Sets Site Name.
     *
     * @maps siteName
     */
    public function setSiteName(?string $siteName): void
    {
        $this->siteName = $siteName;
    }

    /**
     * Returns Timestamp.
     */
    public function getTimestamp(): ?int
    {
        return $this->timestamp;
    }

    /**
     * Sets Timestamp.
     *
     * @maps timestamp
     */
    public function setTimestamp(?int $timestamp): void
    {
        $this->timestamp = $timestamp;
    }

    /**
     * Returns Volume Quantity.
     */
    public function getVolumeQuantity(): ?float
    {
        return $this->volumeQuantity;
    }

    /**
     * Sets Volume Quantity.
     *
     * @maps volumeQuantity
     */
    public function setVolumeQuantity(?float $volumeQuantity): void
    {
        $this->volumeQuantity = $volumeQuantity;
    }

    /**
     * Returns Volume Unit.
     */
    public function getVolumeUnit(): ?string
    {
        return $this->volumeUnit;
    }

    /**
     * Sets Volume Unit.
     *
     * @maps volumeUnit
     */
    public function setVolumeUnit(?string $volumeUnit): void
    {
        $this->volumeUnit = $volumeUnit;
    }

    /**
     * Returns Final Price.
     */
    public function getFinalPrice(): ?float
    {
        return $this->finalPrice;
    }

    /**
     * Sets Final Price.
     *
     * @maps finalPrice
     */
    public function setFinalPrice(?float $finalPrice): void
    {
        $this->finalPrice = $finalPrice;
    }

    /**
     * Returns Currency.
     */
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    /**
     * Sets Currency.
     *
     * @maps currency
     */
    public function setCurrency(?string $currency): void
    {
        $this->currency = $currency;
    }

    /**
     * Returns Status.
     */
    public function getStatus(): ?string
    {
        return $this->status;
    }

    /**
     * Sets Status.
     *
     * @maps status
     */
    public function setStatus(?string $status): void
    {
        $this->status = $status;
    }

    /**
     * Returns Site Address.
     */
    public function getSiteAddress(): ?string
    {
        return $this->siteAddress;
    }

    /**
     * Sets Site Address.
     *
     * @maps siteAddress
     */
    public function setSiteAddress(?string $siteAddress): void
    {
        $this->siteAddress = $siteAddress;
    }

    /**
     * Returns Original Price.
     */
    public function getOriginalPrice(): ?float
    {
        return $this->originalPrice;
    }

    /**
     * Sets Original Price.
     *
     * @maps originalPrice
     */
    public function setOriginalPrice(?float $originalPrice): void
    {
        $this->originalPrice = $originalPrice;
    }

    /**
     * Returns Discount.
     */
    public function getDiscount(): ?float
    {
        return $this->discount;
    }

    /**
     * Sets Discount.
     *
     * @maps discount
     */
    public function setDiscount(?float $discount): void
    {
        $this->discount = $discount;
    }

    /**
     * Returns Payment.
     */
    public function getPayment(): ?FinaliseFuelingRequestPayment
    {
        return $this->payment;
    }

    /**
     * Sets Payment.
     *
     * @maps payment
     */
    public function setPayment(?FinaliseFuelingRequestPayment $payment): void
    {
        $this->payment = $payment;
    }

    /**
     * Returns Products.
     *
     * @return FinaliseFuelingRequestProductsItems[]|null
     */
    public function getProducts(): ?array
    {
        return $this->products;
    }

    /**
     * Sets Products.
     *
     * @maps products
     *
     * @param FinaliseFuelingRequestProductsItems[]|null $products
     */
    public function setProducts(?array $products): void
    {
        $this->products = $products;
    }

    /**
     * Returns Mpp Transaction Id.
     */
    public function getMppTransactionId(): ?string
    {
        return $this->mppTransactionId;
    }

    /**
     * Sets Mpp Transaction Id.
     *
     * @maps mppTransactionId
     */
    public function setMppTransactionId(?string $mppTransactionId): void
    {
        $this->mppTransactionId = $mppTransactionId;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->siteName)) {
            $json['siteName']         = $this->siteName;
        }
        if (isset($this->timestamp)) {
            $json['timestamp']        = $this->timestamp;
        }
        if (isset($this->volumeQuantity)) {
            $json['volumeQuantity']   = $this->volumeQuantity;
        }
        if (isset($this->volumeUnit)) {
            $json['volumeUnit']       = $this->volumeUnit;
        }
        if (isset($this->finalPrice)) {
            $json['finalPrice']       = $this->finalPrice;
        }
        if (isset($this->currency)) {
            $json['currency']         = $this->currency;
        }
        if (isset($this->status)) {
            $json['status']           = $this->status;
        }
        if (isset($this->siteAddress)) {
            $json['siteAddress']      = $this->siteAddress;
        }
        if (isset($this->originalPrice)) {
            $json['originalPrice']    = $this->originalPrice;
        }
        if (isset($this->discount)) {
            $json['discount']         = $this->discount;
        }
        if (isset($this->payment)) {
            $json['payment']          = $this->payment;
        }
        if (isset($this->products)) {
            $json['products']         = $this->products;
        }
        if (isset($this->mppTransactionId)) {
            $json['mppTransactionId'] = $this->mppTransactionId;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
