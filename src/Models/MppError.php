<?php

declare(strict_types=1);

/*
 * ShellSmartPayAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellSmartPayAPILib\Models;

use ShellSmartPayAPILib\ApiHelper;
use stdClass;

class MppError implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $message;

    /**
     * @var string|null
     */
    private $reason;

    /**
     * @var string|null
     */
    private $subject;

    /**
     * @var string|null
     */
    private $subjectType;

    /**
     * @var string|null
     */
    private $type;

    /**
     * Returns Message.
     * Descriptive, human readable error message. Description of the error (e.g. This field is required and
     * must to be between 1 and 255 characters long)
     */
    public function getMessage(): ?string
    {
        return $this->message;
    }

    /**
     * Sets Message.
     * Descriptive, human readable error message. Description of the error (e.g. This field is required and
     * must to be between 1 and 255 characters long)
     *
     * @maps message
     */
    public function setMessage(?string $message): void
    {
        $this->message = $message;
    }

    /**
     * Returns Reason.
     * Additional classification specific for each error type e.g. 'noStock'. The nature of the issue (e.g.
     * missing)
     */
    public function getReason(): ?string
    {
        return $this->reason;
    }

    /**
     * Sets Reason.
     * Additional classification specific for each error type e.g. 'noStock'. The nature of the issue (e.g.
     * missing)
     *
     * @maps reason
     */
    public function setReason(?string $reason): void
    {
        $this->reason = $reason;
    }

    /**
     * Returns Subject.
     * Identifier of the related object e.g. '1'. The field/attribute with an issue (e.g. First Name)
     */
    public function getSubject(): ?string
    {
        return $this->subject;
    }

    /**
     * Sets Subject.
     * Identifier of the related object e.g. '1'. The field/attribute with an issue (e.g. First Name)
     *
     * @maps subject
     */
    public function setSubject(?string $subject): void
    {
        $this->subject = $subject;
    }

    /**
     * Returns Subject Type.
     * Type of the object related to the error e.g. 'entry'. The item it relates to (e.g. Parameter)
     */
    public function getSubjectType(): ?string
    {
        return $this->subjectType;
    }

    /**
     * Sets Subject Type.
     * Type of the object related to the error e.g. 'entry'. The item it relates to (e.g. Parameter)
     *
     * @maps subjectType
     */
    public function setSubjectType(?string $subjectType): void
    {
        $this->subjectType = $subjectType;
    }

    /**
     * Returns Type.
     * Type of the error e.g. 'LowStockError', 'Validation Error'
     */
    public function getType(): ?string
    {
        return $this->type;
    }

    /**
     * Sets Type.
     * Type of the error e.g. 'LowStockError', 'Validation Error'
     *
     * @maps type
     */
    public function setType(?string $type): void
    {
        $this->type = $type;
    }

    /**
     * Converts the MppError object to a human-readable string representation.
     *
     * @return string The string representation of the MppError object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'MppError',
            [
                'message' => $this->message,
                'reason' => $this->reason,
                'subject' => $this->subject,
                'subjectType' => $this->subjectType,
                'type' => $this->type
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->message)) {
            $json['message']     = $this->message;
        }
        if (isset($this->reason)) {
            $json['reason']      = $this->reason;
        }
        if (isset($this->subject)) {
            $json['subject']     = $this->subject;
        }
        if (isset($this->subjectType)) {
            $json['subjectType'] = $this->subjectType;
        }
        if (isset($this->type)) {
            $json['type']        = $this->type;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
