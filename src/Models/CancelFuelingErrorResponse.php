<?php

declare(strict_types=1);

/*
 * ShellSmartPayAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellSmartPayAPILib\Models;

use ShellSmartPayAPILib\ApiHelper;
use stdClass;

/**
 * # Digital Payments â€“ Errors
 * This section details the structure of the response Body vs. the different types of errors that
 * could be returned when Digital Payments system responds with a 400 Response Code.
 * | Error Code   | Error Description   | Suggested message to end user   |
 * |-  |-  |-  |
 * | 9342   | Transaction not cancelled, Txn number unknown   | Oops sorry! We are unable to cancel
 * the transaction. Please wait for the site to cancel the transaction before you retry   |
 * | 50004   | Transaction not cancelled, dispensing is already in progress   | Transaction cannot be
 * cancelled, fueling already in progress   |
 * | 50059   | Transaction not cancelable (not in a 'Processing state')   | Transaction cannot be
 * cancelled, fuel has already been dispensed   |
 */
class CancelFuelingErrorResponse implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $errorCode;

    /**
     * @var string|null
     */
    private $errorDescription;

    /**
     * @var MppError[]|null
     */
    private $errors;

    /**
     * Returns Error Code.
     * The high level error code (e.g. missing data)
     */
    public function getErrorCode(): ?string
    {
        return $this->errorCode;
    }

    /**
     * Sets Error Code.
     * The high level error code (e.g. missing data)
     *
     * @maps errorCode
     */
    public function setErrorCode(?string $errorCode): void
    {
        $this->errorCode = $errorCode;
    }

    /**
     * Returns Error Description.
     * The high level error message (e.g. mandatory fields have not been specified.
     */
    public function getErrorDescription(): ?string
    {
        return $this->errorDescription;
    }

    /**
     * Sets Error Description.
     * The high level error message (e.g. mandatory fields have not been specified.
     *
     * @maps errorDescription
     */
    public function setErrorDescription(?string $errorDescription): void
    {
        $this->errorDescription = $errorDescription;
    }

    /**
     * Returns Errors.
     * Array of error objects. Majority of the time the errorCode and errorDescription will suffice
     *
     * @return MppError[]|null
     */
    public function getErrors(): ?array
    {
        return $this->errors;
    }

    /**
     * Sets Errors.
     * Array of error objects. Majority of the time the errorCode and errorDescription will suffice
     *
     * @maps errors
     *
     * @param MppError[]|null $errors
     */
    public function setErrors(?array $errors): void
    {
        $this->errors = $errors;
    }

    /**
     * Converts the CancelFuelingErrorResponse object to a human-readable string representation.
     *
     * @return string The string representation of the CancelFuelingErrorResponse object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'CancelFuelingErrorResponse',
            [
                'errorCode' => $this->errorCode,
                'errorDescription' => $this->errorDescription,
                'errors' => $this->errors
            ]
        );
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->errorCode)) {
            $json['errorCode']        = $this->errorCode;
        }
        if (isset($this->errorDescription)) {
            $json['errorDescription'] = $this->errorDescription;
        }
        if (isset($this->errors)) {
            $json['errors']           = $this->errors;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
