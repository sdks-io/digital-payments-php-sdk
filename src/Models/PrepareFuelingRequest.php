<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Models;

use stdClass;

class PrepareFuelingRequest implements \JsonSerializable
{
    /**
     * @var float
     */
    private $latitude;

    /**
     * @var float
     */
    private $longitude;

    /**
     * @var float|null
     */
    private $maximumFuelingAmount;

    /**
     * @var string
     */
    private $stationId;

    /**
     * @var string
     */
    private $pumpId;

    /**
     * @var LoyaltyDetails[]|null
     */
    private $loyaltyDetails;

    /**
     * @var string
     */
    private $sourceApplication;

    /**
     * @var string|null
     */
    private $deviceType;

    /**
     * @var PaymentDetailsItems[]
     */
    private $paymentDetails;

    /**
     * @var PrepareFuelingRequestDeviceDetailsItems[]|null
     */
    private $deviceDetails;

    /**
     * @param float $latitude
     * @param float $longitude
     * @param string $stationId
     * @param string $pumpId
     * @param string $sourceApplication
     * @param PaymentDetailsItems[] $paymentDetails
     */
    public function __construct(
        float $latitude,
        float $longitude,
        string $stationId,
        string $pumpId,
        string $sourceApplication,
        array $paymentDetails
    ) {
        $this->latitude = $latitude;
        $this->longitude = $longitude;
        $this->stationId = $stationId;
        $this->pumpId = $pumpId;
        $this->sourceApplication = $sourceApplication;
        $this->paymentDetails = $paymentDetails;
    }

    /**
     * Returns Latitude.
     * The user’s current latitude
     */
    public function getLatitude(): float
    {
        return $this->latitude;
    }

    /**
     * Sets Latitude.
     * The user’s current latitude
     *
     * @required
     * @maps latitude
     */
    public function setLatitude(float $latitude): void
    {
        $this->latitude = $latitude;
    }

    /**
     * Returns Longitude.
     * The user’s current longitude
     */
    public function getLongitude(): float
    {
        return $this->longitude;
    }

    /**
     * Sets Longitude.
     * The user’s current longitude
     *
     * @required
     * @maps longitude
     */
    public function setLongitude(float $longitude): void
    {
        $this->longitude = $longitude;
    }

    /**
     * Returns Maximum Fueling Amount.
     * The maximum fuelling amount that can be purchased. If the prepare fuelling is successful and the
     * Customer starts fuelling their car, the pump will cut off once this threshold is reached. For B2B
     * customers a maximum ceiling is set against their Shell Card. As a result, this can be left blank for
     * B2B customers. If a value is provided it cannot be zero or lower and values that exceed ceiling will
     * be ignored.
     */
    public function getMaximumFuelingAmount(): ?float
    {
        return $this->maximumFuelingAmount;
    }

    /**
     * Sets Maximum Fueling Amount.
     * The maximum fuelling amount that can be purchased. If the prepare fuelling is successful and the
     * Customer starts fuelling their car, the pump will cut off once this threshold is reached. For B2B
     * customers a maximum ceiling is set against their Shell Card. As a result, this can be left blank for
     * B2B customers. If a value is provided it cannot be zero or lower and values that exceed ceiling will
     * be ignored.
     *
     * @maps maximumFuelingAmount
     */
    public function setMaximumFuelingAmount(?float $maximumFuelingAmount): void
    {
        $this->maximumFuelingAmount = $maximumFuelingAmount;
    }

    /**
     * Returns Station Id.
     * Expectation is that a user has to be located at a Shell petrol station in order to make this call. A
     * user is recognised as being located at a Shell station if the user’s current location (as determined
     * by GPS) is within 300 meters of a Shell station. Expectation is that requester will have established
     * the Shell petrol station the user is located at prior to making this call by calling Station Locator
     * APIs. The API will use stationId and siteCountry/GPS to verify the user is The user’s current
     * latitude genuinely located at the specified Station. ‘mpp_station_id’ of the Station Locator API
     * should be used. Leading ‘0’ should be dropped and only last four digits, should be used. E.G. for
     * ‘00123’, only ‘0123’ should be used and for ‘04567’ only ‘4567’ should be used.
     */
    public function getStationId(): string
    {
        return $this->stationId;
    }

    /**
     * Sets Station Id.
     * Expectation is that a user has to be located at a Shell petrol station in order to make this call. A
     * user is recognised as being located at a Shell station if the user’s current location (as determined
     * by GPS) is within 300 meters of a Shell station. Expectation is that requester will have established
     * the Shell petrol station the user is located at prior to making this call by calling Station Locator
     * APIs. The API will use stationId and siteCountry/GPS to verify the user is The user’s current
     * latitude genuinely located at the specified Station. ‘mpp_station_id’ of the Station Locator API
     * should be used. Leading ‘0’ should be dropped and only last four digits, should be used. E.G. for
     * ‘00123’, only ‘0123’ should be used and for ‘04567’ only ‘4567’ should be used.
     *
     * @required
     * @maps stationId
     */
    public function setStationId(string $stationId): void
    {
        $this->stationId = $stationId;
    }

    /**
     * Returns Pump Id.
     * A two digit numeric number of the pump as marked on the forecourt (e.g. pump number 12)
     */
    public function getPumpId(): string
    {
        return $this->pumpId;
    }

    /**
     * Sets Pump Id.
     * A two digit numeric number of the pump as marked on the forecourt (e.g. pump number 12)
     *
     * @required
     * @maps pumpId
     */
    public function setPumpId(string $pumpId): void
    {
        $this->pumpId = $pumpId;
    }

    /**
     * Returns Loyalty Details.
     * Object containing Loyalty details
     *
     * @return LoyaltyDetails[]|null
     */
    public function getLoyaltyDetails(): ?array
    {
        return $this->loyaltyDetails;
    }

    /**
     * Sets Loyalty Details.
     * Object containing Loyalty details
     *
     * @maps loyaltyDetails
     *
     * @param LoyaltyDetails[]|null $loyaltyDetails
     */
    public function setLoyaltyDetails(?array $loyaltyDetails): void
    {
        $this->loyaltyDetails = $loyaltyDetails;
    }

    /**
     * Returns Source Application.
     * The ID of the source application making this call. Each 3rd Party will be issued with its own
     * sourceApp ID that must be specified correctly here
     * *   3rdParty_App_Archetype
     */
    public function getSourceApplication(): string
    {
        return $this->sourceApplication;
    }

    /**
     * Sets Source Application.
     * The ID of the source application making this call. Each 3rd Party will be issued with its own
     * sourceApp ID that must be specified correctly here
     * *   3rdParty_App_Archetype
     *
     * @required
     * @maps sourceApplication
     */
    public function setSourceApplication(string $sourceApplication): void
    {
        $this->sourceApplication = $sourceApplication;
    }

    /**
     * Returns Device Type.
     * The type of device making this call. Permitted values for deviceType:
     * *  car
     * *  phone
     */
    public function getDeviceType(): ?string
    {
        return $this->deviceType;
    }

    /**
     * Sets Device Type.
     * The type of device making this call. Permitted values for deviceType:
     * *  car
     * *  phone
     *
     * @maps deviceType
     */
    public function setDeviceType(?string $deviceType): void
    {
        $this->deviceType = $deviceType;
    }

    /**
     * Returns Payment Details.
     * Object containing Payment details
     *
     * @return PaymentDetailsItems[]
     */
    public function getPaymentDetails(): array
    {
        return $this->paymentDetails;
    }

    /**
     * Sets Payment Details.
     * Object containing Payment details
     *
     * @required
     * @maps paymentDetails
     *
     * @param PaymentDetailsItems[] $paymentDetails
     */
    public function setPaymentDetails(array $paymentDetails): void
    {
        $this->paymentDetails = $paymentDetails;
    }

    /**
     * Returns Device Details.
     * Object containing device details
     *
     * @return PrepareFuelingRequestDeviceDetailsItems[]|null
     */
    public function getDeviceDetails(): ?array
    {
        return $this->deviceDetails;
    }

    /**
     * Sets Device Details.
     * Object containing device details
     *
     * @maps deviceDetails
     *
     * @param PrepareFuelingRequestDeviceDetailsItems[]|null $deviceDetails
     */
    public function setDeviceDetails(?array $deviceDetails): void
    {
        $this->deviceDetails = $deviceDetails;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['latitude']                 = $this->latitude;
        $json['longitude']                = $this->longitude;
        if (isset($this->maximumFuelingAmount)) {
            $json['maximumFuelingAmount'] = $this->maximumFuelingAmount;
        }
        $json['stationId']                = $this->stationId;
        $json['pumpId']                   = $this->pumpId;
        if (isset($this->loyaltyDetails)) {
            $json['loyaltyDetails']       = $this->loyaltyDetails;
        }
        $json['sourceApplication']        = $this->sourceApplication;
        if (isset($this->deviceType)) {
            $json['deviceType']           = $this->deviceType;
        }
        $json['paymentDetails']           = $this->paymentDetails;
        if (isset($this->deviceDetails)) {
            $json['deviceDetails']        = $this->deviceDetails;
        }

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
