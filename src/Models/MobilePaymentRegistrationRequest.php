<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Models;

use stdClass;

class MobilePaymentRegistrationRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $referenceId;

    /**
     * @var string
     */
    private $pan;

    /**
     * @var string
     */
    private $panExpiry;

    /**
     * @var int
     */
    private $period;

    /**
     * @var string
     */
    private $accountId;

    /**
     * @var string
     */
    private $payerId;

    /**
     * @var string
     */
    private $colCoId;

    /**
     * @var CollectingCompany[]
     */
    private $collectingCompanies;

    /**
     * @param string $referenceId
     * @param string $pan
     * @param string $panExpiry
     * @param int $period
     * @param string $accountId
     * @param string $payerId
     * @param string $colCoId
     * @param CollectingCompany[] $collectingCompanies
     */
    public function __construct(
        string $referenceId,
        string $pan,
        string $panExpiry,
        int $period,
        string $accountId,
        string $payerId,
        string $colCoId,
        array $collectingCompanies
    ) {
        $this->referenceId = $referenceId;
        $this->pan = $pan;
        $this->panExpiry = $panExpiry;
        $this->period = $period;
        $this->accountId = $accountId;
        $this->payerId = $payerId;
        $this->colCoId = $colCoId;
        $this->collectingCompanies = $collectingCompanies;
    }

    /**
     * Returns Reference Id.
     * Unique Reference ID the DPAN is registered to. The Reference ID has been implemented to accept
     * normal alphanumeric characters plus the following ‘special characters’&colon;  dot, underscore and
     * hyphen. The following characters are not acceptable&colon; , / @ !  &num; & * ()
     */
    public function getReferenceId(): string
    {
        return $this->referenceId;
    }

    /**
     * Sets Reference Id.
     * Unique Reference ID the DPAN is registered to. The Reference ID has been implemented to accept
     * normal alphanumeric characters plus the following ‘special characters’&colon;  dot, underscore and
     * hyphen. The following characters are not acceptable&colon; , / @ !  &num; & * ()
     *
     * @required
     * @maps referenceId
     */
    public function setReferenceId(string $referenceId): void
    {
        $this->referenceId = $referenceId;
    }

    /**
     * Returns Pan.
     * Original card PAN (generated on creation of Card (see Card Order Service))
     */
    public function getPan(): string
    {
        return $this->pan;
    }

    /**
     * Sets Pan.
     * Original card PAN (generated on creation of Card (see Card Order Service))
     *
     * @required
     * @maps pan
     */
    public function setPan(string $pan): void
    {
        $this->pan = $pan;
    }

    /**
     * Returns Pan Expiry.
     * Expiry Date associated with the PAN in format YYMM.
     */
    public function getPanExpiry(): string
    {
        return $this->panExpiry;
    }

    /**
     * Sets Pan Expiry.
     * Expiry Date associated with the PAN in format YYMM.
     *
     * @required
     * @maps panExpiry
     */
    public function setPanExpiry(string $panExpiry): void
    {
        $this->panExpiry = $panExpiry;
    }

    /**
     * Returns Period.
     * Specifies how many months the DPAN should be valid for. If not present, the Token Server determines
     * the expiry date using its default algorithm. Note that the Token Server might not respect this value
     * and use configured business rules to override the requested validity period
     */
    public function getPeriod(): int
    {
        return $this->period;
    }

    /**
     * Sets Period.
     * Specifies how many months the DPAN should be valid for. If not present, the Token Server determines
     * the expiry date using its default algorithm. Note that the Token Server might not respect this value
     * and use configured business rules to override the requested validity period
     *
     * @required
     * @maps period
     */
    public function setPeriod(int $period): void
    {
        $this->period = $period;
    }

    /**
     * Returns Account Id.
     * In Shell, a Payer can have several accounts (representing company branches, divisions or generally
     * different cost-centers that a customer wants to group cards on). You can specify this property or
     * the AccountNumber.
     */
    public function getAccountId(): string
    {
        return $this->accountId;
    }

    /**
     * Sets Account Id.
     * In Shell, a Payer can have several accounts (representing company branches, divisions or generally
     * different cost-centers that a customer wants to group cards on). You can specify this property or
     * the AccountNumber.
     *
     * @required
     * @maps AccountId
     */
    public function setAccountId(string $accountId): void
    {
        $this->accountId = $accountId;
    }

    /**
     * Returns Payer Id.
     * The Payer Id, or the Customer Id of the Payment Customer. In Shell, a Payer is a customer belonging
     * to a specific market geography. A Payer can have several Accounts; each account can then have
     * different groups of cards.
     */
    public function getPayerId(): string
    {
        return $this->payerId;
    }

    /**
     * Sets Payer Id.
     * The Payer Id, or the Customer Id of the Payment Customer. In Shell, a Payer is a customer belonging
     * to a specific market geography. A Payer can have several Accounts; each account can then have
     * different groups of cards.
     *
     * @required
     * @maps PayerId
     */
    public function setPayerId(string $payerId): void
    {
        $this->payerId = $payerId;
    }

    /**
     * Returns Col Co Id.
     * The ID of the Collecting Company (in GFN), also known as Shell Code of the selected payer. This
     * property is mandatory if the ColCoCode code is not passed
     */
    public function getColCoId(): string
    {
        return $this->colCoId;
    }

    /**
     * Sets Col Co Id.
     * The ID of the Collecting Company (in GFN), also known as Shell Code of the selected payer. This
     * property is mandatory if the ColCoCode code is not passed
     *
     * @required
     * @maps ColCoId
     */
    public function setColCoId(string $colCoId): void
    {
        $this->colCoId = $colCoId;
    }

    /**
     * Returns Collecting Companies.
     * Array of Colco Ids
     *
     * @return CollectingCompany[]
     */
    public function getCollectingCompanies(): array
    {
        return $this->collectingCompanies;
    }

    /**
     * Sets Collecting Companies.
     * Array of Colco Ids
     *
     * @required
     * @maps CollectingCompanies
     *
     * @param CollectingCompany[] $collectingCompanies
     */
    public function setCollectingCompanies(array $collectingCompanies): void
    {
        $this->collectingCompanies = $collectingCompanies;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['referenceId']         = $this->referenceId;
        $json['pan']                 = $this->pan;
        $json['panExpiry']           = $this->panExpiry;
        $json['period']              = $this->period;
        $json['AccountId']           = $this->accountId;
        $json['PayerId']             = $this->payerId;
        $json['ColCoId']             = $this->colCoId;
        $json['CollectingCompanies'] = $this->collectingCompanies;

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
