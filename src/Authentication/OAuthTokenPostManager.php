<?php

declare(strict_types=1);

/*
 * ShellSmartPayAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellSmartPayAPILib\Authentication;

use Core\Authentication\CoreAuth;
use ShellSmartPayAPILib\ConfigurationDefaults;
use Core\Request\Parameters\HeaderParam;

/**
 * Utility class for authorization and token management.
 */
class OAuthTokenPostManager extends CoreAuth implements OAuthTokenPostCredentials
{
    /**
     * @var array
     */
    private $config;

    public function __construct(array $config)
    {
        $this->config = $config;
        parent::__construct(
            HeaderParam::init('X-Apigee-Authorization', $this->getXApigeeAuthorization())->requiredNonEmpty()
        );
    }

    /**
     * String value for xApigeeAuthorization.
     */
    public function getXApigeeAuthorization(): string
    {
        return $this->config['xApigeeAuthorization'] ?? ConfigurationDefaults::X_APIGEE_AUTHORIZATION;
    }

    /**
     * Checks if provided credentials match with existing ones.
     *
     * @param string $xApigeeAuthorization API Gateway Access token to be passed for Authentiction.
     *        The calling party’s OAuth 2.0/bearer token that’s required for using the Shell API
     *        Platform. ([How to obtain APIGEE access token?](page:guided-
     *        walkthrough/walkthrough1))
     */
    public function equals(string $xApigeeAuthorization): bool
    {
        return $xApigeeAuthorization == $this->getXApigeeAuthorization();
    }
}
