<?php

declare(strict_types=1);

/*
 * ShellSmartPayAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellSmartPayAPILib;

use Core\ClientBuilder;
use Core\Utils\CoreHelper;
use ShellSmartPayAPILib\Authentication\MppTokenCredentials;
use ShellSmartPayAPILib\Authentication\MppTokenCredentialsBuilder;
use ShellSmartPayAPILib\Authentication\MppTokenManager;
use ShellSmartPayAPILib\Authentication\OAuthTokenPostCredentials;
use ShellSmartPayAPILib\Authentication\OAuthTokenPostCredentialsBuilder;
use ShellSmartPayAPILib\Authentication\OAuthTokenPostManager;
use ShellSmartPayAPILib\Controllers\DigitalPaymentEnablementController;
use ShellSmartPayAPILib\Controllers\FuelingController;
use ShellSmartPayAPILib\Controllers\PartnerNotificationController;
use ShellSmartPayAPILib\Controllers\ShellAPIPlatformSecurityAuthenticationController;
use ShellSmartPayAPILib\Controllers\StationLocatorController;
use ShellSmartPayAPILib\Utils\CompatibilityConverter;
use Unirest\Configuration;
use Unirest\HttpClient;

class ShellSmartPayAPIClient implements ConfigurationInterface
{
    private $shellAPIPlatformSecurityAuthentication;

    private $digitalPaymentEnablement;

    private $stationLocator;

    private $fueling;

    private $partnerNotification;

    private $mppTokenManager;

    private $oAuthTokenPostManager;

    private $config;

    private $client;

    /**
     * @see ShellSmartPayAPIClientBuilder::init()
     * @see ShellSmartPayAPIClientBuilder::build()
     *
     * @param array $config
     */
    public function __construct(array $config = [])
    {
        $this->config = array_merge(ConfigurationDefaults::_ALL, CoreHelper::clone($config));
        $this->mppTokenManager = new MppTokenManager($this->config);
        $this->oAuthTokenPostManager = new OAuthTokenPostManager($this->config);
        $this->client = ClientBuilder::init(new HttpClient(Configuration::init($this)))
            ->converter(new CompatibilityConverter())
            ->jsonHelper(ApiHelper::getJsonHelper())
            ->apiCallback($this->config['httpCallback'] ?? null)
            ->userAgent('APIMATIC 3.0')
            ->serverUrls(self::ENVIRONMENT_MAP[$this->getEnvironment()], Server::SHELL)
            ->authManagers(
                ['MppToken' => $this->mppTokenManager, 'oAuthTokenPost' => $this->oAuthTokenPostManager]
            )
            ->build();
    }

    /**
     * Create a builder with the current client's configurations.
     *
     * @return ShellSmartPayAPIClientBuilder ShellSmartPayAPIClientBuilder instance
     */
    public function toBuilder(): ShellSmartPayAPIClientBuilder
    {
        $builder = ShellSmartPayAPIClientBuilder::init()
            ->timeout($this->getTimeout())
            ->enableRetries($this->shouldEnableRetries())
            ->numberOfRetries($this->getNumberOfRetries())
            ->retryInterval($this->getRetryInterval())
            ->backOffFactor($this->getBackOffFactor())
            ->maximumRetryWaitTime($this->getMaximumRetryWaitTime())
            ->retryOnTimeout($this->shouldRetryOnTimeout())
            ->httpStatusCodesToRetry($this->getHttpStatusCodesToRetry())
            ->httpMethodsToRetry($this->getHttpMethodsToRetry())
            ->environment($this->getEnvironment())
            ->httpCallback($this->config['httpCallback'] ?? null);

        $mppToken = $this->getMppTokenCredentialsBuilder();
        if ($mppToken != null) {
            $builder->mppTokenCredentials($mppToken);
        }

        $oAuthTokenPost = $this->getOAuthTokenPostCredentialsBuilder();
        if ($oAuthTokenPost != null) {
            $builder->oAuthTokenPostCredentials($oAuthTokenPost);
        }
        return $builder;
    }

    public function getTimeout(): int
    {
        return $this->config['timeout'] ?? ConfigurationDefaults::TIMEOUT;
    }

    public function shouldEnableRetries(): bool
    {
        return $this->config['enableRetries'] ?? ConfigurationDefaults::ENABLE_RETRIES;
    }

    public function getNumberOfRetries(): int
    {
        return $this->config['numberOfRetries'] ?? ConfigurationDefaults::NUMBER_OF_RETRIES;
    }

    public function getRetryInterval(): float
    {
        return $this->config['retryInterval'] ?? ConfigurationDefaults::RETRY_INTERVAL;
    }

    public function getBackOffFactor(): float
    {
        return $this->config['backOffFactor'] ?? ConfigurationDefaults::BACK_OFF_FACTOR;
    }

    public function getMaximumRetryWaitTime(): int
    {
        return $this->config['maximumRetryWaitTime'] ?? ConfigurationDefaults::MAXIMUM_RETRY_WAIT_TIME;
    }

    public function shouldRetryOnTimeout(): bool
    {
        return $this->config['retryOnTimeout'] ?? ConfigurationDefaults::RETRY_ON_TIMEOUT;
    }

    public function getHttpStatusCodesToRetry(): array
    {
        return $this->config['httpStatusCodesToRetry'] ?? ConfigurationDefaults::HTTP_STATUS_CODES_TO_RETRY;
    }

    public function getHttpMethodsToRetry(): array
    {
        return $this->config['httpMethodsToRetry'] ?? ConfigurationDefaults::HTTP_METHODS_TO_RETRY;
    }

    public function getEnvironment(): string
    {
        return $this->config['environment'] ?? ConfigurationDefaults::ENVIRONMENT;
    }

    public function getMppTokenCredentials(): MppTokenCredentials
    {
        return $this->mppTokenManager;
    }

    public function getMppTokenCredentialsBuilder(): ?MppTokenCredentialsBuilder
    {
        if (empty($this->mppTokenManager->getAuthorization())) {
            return null;
        }
        return MppTokenCredentialsBuilder::init($this->mppTokenManager->getAuthorization());
    }

    public function getOAuthTokenPostCredentials(): OAuthTokenPostCredentials
    {
        return $this->oAuthTokenPostManager;
    }

    public function getOAuthTokenPostCredentialsBuilder(): ?OAuthTokenPostCredentialsBuilder
    {
        if (empty($this->oAuthTokenPostManager->getXApigeeAuthorization())) {
            return null;
        }
        return OAuthTokenPostCredentialsBuilder::init($this->oAuthTokenPostManager->getXApigeeAuthorization());
    }

    /**
     * Get the client configuration as an associative array
     *
     * @see ShellSmartPayAPIClientBuilder::getConfiguration()
     */
    public function getConfiguration(): array
    {
        return $this->toBuilder()->getConfiguration();
    }

    /**
     * Clone this client and override given configuration options
     *
     * @see ShellSmartPayAPIClientBuilder::build()
     */
    public function withConfiguration(array $config): self
    {
        return new self(array_merge($this->config, $config));
    }

    /**
     * Get the base uri for a given server in the current environment.
     *
     * @param string $server Server name
     *
     * @return string Base URI
     */
    public function getBaseUri(string $server = Server::SHELL): string
    {
        return $this->client->getGlobalRequest($server)->getQueryUrl();
    }

    /**
     * Returns Shell API Platform Security Authentication Controller
     */
    // phpcs:ignore
    public function getShellAPIPlatformSecurityAuthenticationController(): ShellAPIPlatformSecurityAuthenticationController
    {
        if ($this->shellAPIPlatformSecurityAuthentication == null) {
            $this->shellAPIPlatformSecurityAuthentication = new ShellAPIPlatformSecurityAuthenticationController(
                $this->client
            );
        }
        return $this->shellAPIPlatformSecurityAuthentication;
    }

    /**
     * Returns Digital Payment Enablement Controller
     */
    public function getDigitalPaymentEnablementController(): DigitalPaymentEnablementController
    {
        if ($this->digitalPaymentEnablement == null) {
            $this->digitalPaymentEnablement = new DigitalPaymentEnablementController($this->client);
        }
        return $this->digitalPaymentEnablement;
    }

    /**
     * Returns Station Locator Controller
     */
    public function getStationLocatorController(): StationLocatorController
    {
        if ($this->stationLocator == null) {
            $this->stationLocator = new StationLocatorController($this->client);
        }
        return $this->stationLocator;
    }

    /**
     * Returns Fueling Controller
     */
    public function getFuelingController(): FuelingController
    {
        if ($this->fueling == null) {
            $this->fueling = new FuelingController($this->client);
        }
        return $this->fueling;
    }

    /**
     * Returns Partner Notification Controller
     */
    public function getPartnerNotificationController(): PartnerNotificationController
    {
        if ($this->partnerNotification == null) {
            $this->partnerNotification = new PartnerNotificationController($this->client);
        }
        return $this->partnerNotification;
    }

    /**
     * A map of all base urls used in different environments and servers
     *
     * @var array
     */
    private const ENVIRONMENT_MAP = [
        Environment::TEST => [
            Server::SHELL => 'https://api-test.shell.com/ShellDigitalCommerceServices/Payments/B2B/Partner'
        ],
        Environment::PRODUCTION => [
            Server::SHELL => 'https://api.shell.com/ShellDigitalCommerceServices/Payments/B2B/Partner'
        ]
    ];
}
