<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Tests;

use Core\Types\CallbackCatcher;
use ShellEVLib\Authentication\MppTokenCredentialsBuilder;
use ShellEVLib\Authentication\OAuthTokenPostCredentialsBuilder;
use ShellEVLib\ShellEVClient;
use ShellEVLib\ShellEVClientBuilder;

class ClientFactory
{
    public static function create(CallbackCatcher $httpCallback): ShellEVClient
    {
        $clientBuilder = ShellEVClientBuilder::init();
        $clientBuilder = self::addConfigurationFromEnvironment($clientBuilder);
        $clientBuilder = self::addTestConfiguration($clientBuilder);
        return $clientBuilder->httpCallback($httpCallback)->build();
    }

    public static function addTestConfiguration(ShellEVClientBuilder $builder): ShellEVClientBuilder
    {
        return $builder;
    }

    public static function addConfigurationFromEnvironment(ShellEVClientBuilder $builder): ShellEVClientBuilder
    {
        $timeout = getenv('SHELL_EV_LIB_TIMEOUT');
        $numberOfRetries = getenv('SHELL_EV_LIB_NUMBER_OF_RETRIES');
        $maximumRetryWaitTime = getenv('SHELL_EV_LIB_MAXIMUM_RETRY_WAIT_TIME');
        $environment = getenv('SHELL_EV_LIB_ENVIRONMENT');
        $authorization = getenv('SHELL_EV_LIB_AUTHORIZATION');
        $xApigeeAuthorization = getenv('SHELL_EV_LIB_X_APIGEE_AUTHORIZATION');

        if (!empty($timeout) && \is_numeric($timeout)) {
            $builder->timeout(intval($timeout));
        }

        if (!empty($numberOfRetries) && \is_numeric($numberOfRetries)) {
            $builder->numberOfRetries(intval($numberOfRetries));
        }

        if (!empty($maximumRetryWaitTime) && \is_numeric($maximumRetryWaitTime)) {
            $builder->maximumRetryWaitTime(intval($maximumRetryWaitTime));
        }

        if (!empty($environment)) {
            $builder->environment($environment);
        }

        if (!empty($authorization)) {
            $builder->mppTokenCredentials(MppTokenCredentialsBuilder::init($authorization));
        }

        if (!empty($xApigeeAuthorization)) {
            $builder->oAuthTokenPostCredentials(OAuthTokenPostCredentialsBuilder::init($xApigeeAuthorization));
        }

        return $builder;
    }
}
