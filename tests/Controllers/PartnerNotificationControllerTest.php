<?php

declare(strict_types=1);

/*
 * ShellSmartPayAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellSmartPayAPILib\Tests\Controllers;

use ShellSmartPayAPILib\Controllers\PartnerNotificationController;
use ShellSmartPayAPILib\Exceptions;

class PartnerNotificationControllerTest extends BaseTestController
{
    /**
     * @var PartnerNotificationController PartnerNotificationController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getPartnerNotificationController();
    }

    public function testPartnerToken()
    {
        // Parameters for the API call
        $grantType = 'client_credentials';
        $clientId = 'SOFflRakNlwnWlxfOXQ4GHDVyqGawuKA';
        $clientSecret = 'cRnWgw7gACqM3gVS';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->partnerToken($grantType, $clientId, $clientSecret);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testFinaliseFueling()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        try {
            self::$controller->finaliseFueling($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testCancelFueling()
    {
        // Parameters for the API call
        $body = null;

        // Perform API call
        try {
            self::$controller->cancelFueling($body);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }
}
