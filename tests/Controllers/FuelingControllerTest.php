<?php

declare(strict_types=1);

/*
 * ShellEVLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ShellEVLib\Tests\Controllers;

use ShellEVLib\Controllers\FuelingController;
use ShellEVLib\Exceptions;

class FuelingControllerTest extends BaseTestController
{
    /**
     * @var FuelingController FuelingController instance
     */
    protected static $controller;

    /**
     * Setup test class
     */
    public static function setUpBeforeClass(): void
    {
        self::$controller = parent::getClient()->getFuelingController();
    }

    public function testMppToken()
    {
        // Parameters for the API call
        $grantType = 'client_credentials';
        $clientId = 'b2bmpp-cli';
        $clientSecret = 'f20935d8f14a44bd1f0923cc4c4fa63f7b25922330cd5080f735f1a2769ece77ce245cfe8ba4cbd2a58544ee5113c200b8e37a7be33311e4b6f3c785bf3f37d2';

        // Perform API call
        $result = null;
        try {
            $result = self::$controller->mppToken($grantType, $clientId, $clientSecret);
        } catch (Exceptions\ApiException $e) {
        }

        $headers = [];
        $headers['Content-Type'] = ['application/json', true];

        // Assert result with expected response
        $this->newTestCase($result)->expectStatus(200)->allowExtraHeaders()->expectHeaders($headers)->assert();
    }

    public function testMppCancelFueling()
    {
        // Parameters for the API call
        $mppTransactionId =
            '000000001C48';

        // Perform API call
        try {
            self::$controller->mppCancelFueling($mppTransactionId);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(200)->assert();
    }

    public function testMppCancelFueling1()
    {
        // Parameters for the API call
        $mppTransactionId =
            '000000001C48';

        // Perform API call
        try {
            self::$controller->mppCancelFueling($mppTransactionId);
        } catch (Exceptions\ApiException $e) {
        }

        // Assert result with expected response
        $this->newTestCase(null)->expectStatus(204)->assert();
    }
}
